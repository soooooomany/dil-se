// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phoneNumber   String?
  password      String?
  emailVerified DateTime?
  role          Role      @default(USER)
  cart          Cart?
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Verification {
  id        String   @id @default(uuid())
  otp       Int
  email     String
  scope     VerificationScope
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verifications")
}

enum Category {
  BREAD
  CAKE
  PASTRY
  COOKIE
  BEVERAGE
}

model Product {
  id                String   @id @default(uuid())
  name              String
  description       String?
  imageUrl          String?  @map("image_url")
  price             Decimal  @db.Decimal(10,2)
  category          Category @default(BREAD)
  featured          Boolean  @default(false)
  stock             Int      @default(0)
  lowStockThreshold Int      @default(5)
  items             Item[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("products")
}

model Cart {
  id        String   @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String   @unique
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Order {
  id         String       @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  total      Decimal      @db.Decimal(10,2)
  status     OrderStatus  @default(PENDING)
  items      Item[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("orders")
}

model Item {
  id           String   @id @default(uuid())
  cart         Cart?    @relation(fields: [cartId], references: [id])
  cartId       String?
  order        Order?   @relation(fields: [orderId], references: [id])
  orderId      String?
  product      Product  @relation(fields: [productId], references: [id])
  productId    String
  productName  String
  productImage String?
  price        Decimal  @db.Decimal(10,2)
  quantity     Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("items")
}

enum Role {
  ADMIN
  USER
}

enum VerificationScope {
  LOGIN
  SIGNUP
  RESET
  CONFIRMATION
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
